<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GRPC on Razeen`s Blog</title><link>https://razeencheng.com/categories/grpc/</link><description>Recent content in GRPC on Razeen`s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 06 Aug 2018 02:05:00 +0000</lastBuildDate><atom:link href="https://razeencheng.com/categories/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC在Go中的使用（三）gRPC实现TLS加密通信与流模式</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-03/</link><pubDate>Mon, 06 Aug 2018 02:05:00 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-03/</guid><description>&lt;p>在前面的两篇博客中，我们已经知道了如何利用gRPC建立简单RPC通信。但这样简单的实现有时候满足不了我们的业务需求。在一些场景中我们需要防止数据被劫持，或是一些场景中我们希望客户端与服务器不是简单的一问一答，而是建立起一个流式的RPC通信，那么该怎么做到呢？&lt;/p></description></item><item><title>gRPC在Go中的使用（二）gRPC实现简单通讯</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-02/</link><pubDate>Thu, 19 Jul 2018 01:51:06 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-02/</guid><description>&lt;p>在上一篇中，我们用protobuf定义了两个消息&lt;code>HelloWorldRequest&lt;/code>与&lt;code>HelloWorldResponse&lt;/code>以及一个&lt;code>HelloWorldService&lt;/code>服务。同时，我们还生成了相应的go代码&lt;code>.pb.go&lt;/code>。&lt;/p>
&lt;p>那么客户端与服务端怎么去通过这些接口去完成通讯呢？下面我们一起实现一个简单的gRPC通讯。&lt;/p></description></item><item><title>gRPC在Go中的使用（一）Protocol Buffers语法与相关使用</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-01/</link><pubDate>Mon, 16 Jul 2018 01:00:41 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-01/</guid><description>&lt;p>在gRPC官网用了一句话来介绍:“一个高性能、开源的通用RPC框架”，同时介绍了其四大特点：&lt;/p>
&lt;ul>
&lt;li>定义简单&lt;/li>
&lt;li>支持多种编程语言多种平台&lt;/li>
&lt;li>快速启动和缩放&lt;/li>
&lt;li>双向流媒体和集成身份验证&lt;/li>
&lt;/ul></description></item></channel></rss>