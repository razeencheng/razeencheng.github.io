<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开发实战总结 on Razeen`s Blog</title><link>https://razeencheng.com/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</link><description>Recent content in 开发实战总结 on Razeen`s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 06 Mar 2021 07:01:51 +0000</lastBuildDate><atom:link href="https://razeencheng.com/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml"/><item><title>记一次 Nginx DNS 缓存导致转发问题</title><link>https://razeencheng.com/posts/nginx-proxy-problem-with-dns-cache/</link><pubDate>Sat, 06 Mar 2021 07:01:51 +0000</pubDate><guid>https://razeencheng.com/posts/nginx-proxy-problem-with-dns-cache/</guid><description>&lt;p>在家里搭建了一个 GitLab 服务器，由于电信家庭宽带的公网 IP 是不固定的，且&lt;code>443&lt;/code>端口是被封的，所以买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS ，这样就能正常上自己的 Git 了。但今天，我发现推代码怎么也推不上去，校对了密钥，服务器状态都没问题。最后上阿里云，重启了下 Nginx，发现可以了。 找了一圈原因，最后发现是 Nginx 转发缓存 DNS 解析导致的，下面我们就复现一下问题并找找为什么，以及解决方式。&lt;/p></description></item><item><title>利用 git hook 规范你的代码与 commit message</title><link>https://razeencheng.com/posts/golang-and-git-commit-message-pre-commit/</link><pubDate>Mon, 13 Apr 2020 07:08:37 +0000</pubDate><guid>https://razeencheng.com/posts/golang-and-git-commit-message-pre-commit/</guid><description>&lt;p>在团队协作时，由于个人编码习惯的差异，导致代码格式，风格都会有所不同，这就给代码审核带来一定的困难，更严重的是会导致整体的代码质量不可控。这时，我们有必要借助一些工具来约束我们的代码格式。在Go中，我们经常使用的工具有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>goimports&lt;/code>: 自动导包；&lt;/li>
&lt;li>&lt;code>gofmt&lt;/code> : 格式化我们的代码；&lt;/li>
&lt;li>&lt;code>golint&lt;/code>: 检查代码命名，注释等；&lt;/li>
&lt;li>&lt;code>go vet&lt;/code>: 静态错误检查。&lt;/li>
&lt;/ul>
&lt;p>那么，我们可以利用这些工具来规范团队的代码风格。但如果每次手动执行这些命令，或者仅仅依靠IDE去检查，这是不靠谱的，因为人的行为本身是不靠谱的==。&lt;/p>
&lt;p>于是，我们可以结合&lt;code>git hook&lt;/code>, 强制执行这些检查，检查不通过，代码都无法提交，从而达到强一致性。&lt;/p>
&lt;p>同时，结合上一篇&lt;a href="https://razeencheng.com/post/conventional-commits-and-standard-version.html">&amp;laquo;规范git commit message与自动化版本控制&amp;raquo;&lt;/a>, 这里我们介绍一下利用pre-commit 约束commit-msg来约束我们的代码与git commit message。&lt;/p></description></item><item><title>规范 git commit message 与自动化版本控制</title><link>https://razeencheng.com/posts/conventional-commits-and-standard-version/</link><pubDate>Sun, 12 Apr 2020 23:27:53 +0000</pubDate><guid>https://razeencheng.com/posts/conventional-commits-and-standard-version/</guid><description>&lt;p>git commit message是你对你所编码内容的总结概括。规范、详细的git commit message不仅能体现你的内容概括能力，还能为你自己和团队，或项目带来巨大的好处，这也是我所推崇的。但很多小伙伴不愿意花时间在这里，经常会写出&lt;code>优化了一些功能&lt;/code>、&lt;code>修复了一些BUG&lt;/code>等等模糊不清的commit message，完全没有意识到这么写会带来一些严重的问题：&lt;/p>
&lt;ul>
&lt;li>管理者/其他项目参与者无法快速获取有用信息，判定修改内容，只有花大量时间阅读源码；&lt;/li>
&lt;li>事后无法快速定位以前遇到的类似问题；&lt;/li>
&lt;li>无法自动化版本控制，只有每次重新阅读代码，手动写一些详细的描述，用来发布新版或提交测试。&lt;/li>
&lt;/ul>
&lt;p>规范、详细的git commit message不仅能解决这些问题，还能带来更多的好处。&lt;/p></description></item><item><title>超详细 vim 配置 (with MacVim)</title><link>https://razeencheng.com/posts/my-macvim-vimrc/</link><pubDate>Tue, 24 Mar 2020 23:26:48 +0000</pubDate><guid>https://razeencheng.com/posts/my-macvim-vimrc/</guid><description>&lt;p>MacVim 用了很久，非常喜欢 vim 编程带来的高效，清爽，hack 的感觉，感谢&lt;a href="https://github.com/deepzz0/dotfiles/blob/master/macvim/vimrc">deepzz&lt;/a>多年前的传道。这两天花了点时间一行一行的去查vimrc内的配置，大概弄清了每一项配置的作用，并标上注释，整理常用快捷键。&lt;/p></description></item><item><title>关于 Docker 清理</title><link>https://razeencheng.com/posts/clean-your-docker/</link><pubDate>Fri, 05 Apr 2019 03:43:48 +0000</pubDate><guid>https://razeencheng.com/posts/clean-your-docker/</guid><description>&lt;p>在Docker的日常使用中，我们或许偶尔遇到下面这些情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker-compose ps
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>27142&lt;span class="o">]&lt;/span> INTERNAL ERROR: cannot create temporary directory!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ df -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Filesystem Size Used Avail Use% Mounted on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtmpfs 489M 132K 488M 1% /dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmpfs 497M &lt;span class="m">0&lt;/span> 497M 0% /dev/shm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/dev/xvda1 7.8G 7.7G &lt;span class="m">0&lt;/span> 100% /
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MIME Types 速查表</title><link>https://razeencheng.com/posts/mime-types-quick-look/</link><pubDate>Fri, 01 Mar 2019 21:17:25 +0000</pubDate><guid>https://razeencheng.com/posts/mime-types-quick-look/</guid><description>&lt;p>做web开发时，经常需要设置一些返回数据的类型的头部，也就是 MIME Types。 这遍博客就是收罗了大部分的类型, 如果以后发现新的会持续更新。&lt;/p></description></item><item><title>记一次 PostgreSQL LIKE 索引优化，联合字段 LIKE 查询优化。</title><link>https://razeencheng.com/posts/pg-like-index-optimize/</link><pubDate>Sat, 01 Sep 2018 07:06:06 +0000</pubDate><guid>https://razeencheng.com/posts/pg-like-index-optimize/</guid><description>&lt;p>由于最近我司业务量上涨，数据量剧增，数据库查询速度明显变慢，单次查询居然达到1800ms以上，急需优化。待查阅一番后，我知道了LIKE查询正确的索引使用姿势，特别是一些符合字段索引。&lt;/p></description></item><item><title>日常 Postgres 数据库点滴记录</title><link>https://razeencheng.com/posts/postgres-daily/</link><pubDate>Thu, 17 May 2018 18:40:05 +0000</pubDate><guid>https://razeencheng.com/posts/postgres-daily/</guid><description>&lt;p>Desc:Postgres数据库日常使用，插入更新，复制表，一些使用习惯。&lt;/p>
&lt;p>由于经常接触数据库，但又停留在比较浅的层次，暂且没有时间也没必要去系统了解，这篇博客权当记录一些自己常用到的pg数据库语句，持续更新~&lt;/p></description></item><item><title>一次诡异的数据库删除</title><link>https://razeencheng.com/posts/strage-db-delete/</link><pubDate>Thu, 12 Apr 2018 13:10:18 +0000</pubDate><guid>https://razeencheng.com/posts/strage-db-delete/</guid><description>&lt;p>事情是这样的。&lt;/p>
&lt;p>我们的项目使用的是&lt;code>sqlite3&lt;/code>数据库。在一次常规模拟测试中，我们想了解，如果程序正在运行中，用户将&lt;code>sqlite3&lt;/code>数据库文件删除，程序能否进入预设的重置流程。&lt;/p>
&lt;p>结果，我们却让我们有些意外。&lt;/p></description></item><item><title>AWS 命令行界面(aws-cli)从安装到快速上手</title><link>https://razeencheng.com/posts/tool-awscli-overview-1/</link><pubDate>Fri, 17 Nov 2017 02:47:00 +0000</pubDate><guid>https://razeencheng.com/posts/tool-awscli-overview-1/</guid><description>&lt;p>AWS 命令行界面 (CLI) 是用于管理 AWS 服务的统一工具。只通过一个工具进行下载和配置，您可以使用命令行控制多个 AWS 服务并利用脚本来自动执行这些服务。 &amp;mdash;- aws官方是这么描叙aws-cli的。在实际使用的时候通过脚本完成全自动化部署，一键管理许多云服务，aws-cli确实是你管理aws服务的一个提高生产力的好工具。&lt;/p></description></item><item><title>使用 goose 让数据库迁移更加轻松</title><link>https://razeencheng.com/posts/db-tool-goose/</link><pubDate>Tue, 28 Mar 2017 18:38:00 +0000</pubDate><guid>https://razeencheng.com/posts/db-tool-goose/</guid><description>&lt;p>在开发到发布的过程中，数据库的迁移是一件较为繁琐的事，而goose的出现，让数据库的迁移变得很轻松。&lt;/p>
&lt;p>我们只需要简单的一句&lt;code>goose up&lt;/code> 就能将数据库重新部署，一句&lt;code>goose down&lt;/code> 就能将原有的数据库清除，是不是感觉很easy！&lt;/p></description></item></channel></rss>