<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>stream on Razeen`s Blog</title><link>https://razeencheng.com/tags/stream/</link><description>Recent content in stream on Razeen`s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 06 Aug 2018 02:05:00 +0000</lastBuildDate><atom:link href="https://razeencheng.com/tags/stream/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC在Go中的使用（三）gRPC实现TLS加密通信与流模式</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-03/</link><pubDate>Mon, 06 Aug 2018 02:05:00 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-03/</guid><description>&lt;p>在前面的两篇博客中，我们已经知道了如何利用gRPC建立简单RPC通信。但这样简单的实现有时候满足不了我们的业务需求。在一些场景中我们需要防止数据被劫持，或是一些场景中我们希望客户端与服务器不是简单的一问一答，而是建立起一个流式的RPC通信，那么该怎么做到呢？&lt;/p></description></item></channel></rss>