<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Razeen`s Blog</title><link>https://razeencheng.com/tags/golang/</link><description>Recent content in golang on Razeen`s Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 20 Jul 2021 09:30:10 +0000</lastBuildDate><atom:link href="https://razeencheng.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go学习笔记（十）老项目迁移 go module 大型灾难记录</title><link>https://razeencheng.com/posts/accidents-of-migrating-to-go-modules/</link><pubDate>Tue, 20 Jul 2021 09:30:10 +0000</pubDate><guid>https://razeencheng.com/posts/accidents-of-migrating-to-go-modules/</guid><description>&lt;p>最近在改造一个比较早期的一个项目，其中就涉及到用将原来 &lt;code>Vendor&lt;/code> 管理依赖换成 &lt;code>Go Modules&lt;/code> 来管理。 然而过程真是一波三折，在这里总结一下此次 &lt;code>Go Modules&lt;/code> 改造中遇到的问题，以及解决方法。&lt;/p></description></item><item><title>折腾 Ubuntu 20.04 LTS 开发环境</title><link>https://razeencheng.com/posts/start-use-ubuntu-and-win/</link><pubDate>Fri, 28 Aug 2020 02:48:08 +0000</pubDate><guid>https://razeencheng.com/posts/start-use-ubuntu-and-win/</guid><description>&lt;p>&lt;del>前段时间买了个 Inter NUC (NUC10i5FNH6), 主要用来在家里搬砖。体验了一段时间 win10, 虽然配置了 WSL2， 但开发体验实在糟糕，在考虑过 Ubuntu 和黑苹果后，还是选择了 Ubuntu, 毕竟用习惯了白苹果，突然用个黑苹果，不能随意升级，还有接一个 USB WiFi ，还担心驱动问题。。。&lt;/del>&lt;/p>
&lt;blockquote>
&lt;p>NUC 用了一段时间，还是有点卡，CPU跟不上。 最后还是组装了一台台式主机，将原来的系统盘查上去直接就可使用，爽到飞起。 至于NUC就当服务器用了。&lt;/p>
&lt;/blockquote>
&lt;p>毕竟头一次想把 Ubuntu 当作生产力，记录一下折腾过程。&lt;/p></description></item><item><title>Go学习笔记（九） 计时器的生命周期[译]</title><link>https://razeencheng.com/posts/go-timers-life-cycle/</link><pubDate>Sat, 15 Aug 2020 07:41:00 +0000</pubDate><guid>https://razeencheng.com/posts/go-timers-life-cycle/</guid><description>&lt;p>&lt;img src="https://s.razeen.cn/images/2020/go-timer.png" alt="Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French.">&lt;/p>
&lt;p>&lt;em>全文基于GO 1.14&lt;/em>&lt;/p>
&lt;p>计时器在定时执行一些任务时很有用。Go内部依靠调度器来管理创建的计时器。而Go的调度程序是协作式的调度方式，这会让整个调度看起来比较复杂，因为goroutune必须自己停止（依赖channel阻塞或system call), 或者由调度器自己在某个调度点暂停。&lt;/p></description></item><item><title>利用 git hook 规范你的代码与 commit message</title><link>https://razeencheng.com/posts/golang-and-git-commit-message-pre-commit/</link><pubDate>Mon, 13 Apr 2020 07:08:37 +0000</pubDate><guid>https://razeencheng.com/posts/golang-and-git-commit-message-pre-commit/</guid><description>&lt;p>在团队协作时，由于个人编码习惯的差异，导致代码格式，风格都会有所不同，这就给代码审核带来一定的困难，更严重的是会导致整体的代码质量不可控。这时，我们有必要借助一些工具来约束我们的代码格式。在Go中，我们经常使用的工具有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>goimports&lt;/code>: 自动导包；&lt;/li>
&lt;li>&lt;code>gofmt&lt;/code> : 格式化我们的代码；&lt;/li>
&lt;li>&lt;code>golint&lt;/code>: 检查代码命名，注释等；&lt;/li>
&lt;li>&lt;code>go vet&lt;/code>: 静态错误检查。&lt;/li>
&lt;/ul>
&lt;p>那么，我们可以利用这些工具来规范团队的代码风格。但如果每次手动执行这些命令，或者仅仅依靠IDE去检查，这是不靠谱的，因为人的行为本身是不靠谱的==。&lt;/p>
&lt;p>于是，我们可以结合&lt;code>git hook&lt;/code>, 强制执行这些检查，检查不通过，代码都无法提交，从而达到强一致性。&lt;/p>
&lt;p>同时，结合上一篇&lt;a href="https://razeencheng.com/post/conventional-commits-and-standard-version.html">&amp;laquo;规范git commit message与自动化版本控制&amp;raquo;&lt;/a>, 这里我们介绍一下利用pre-commit 约束commit-msg来约束我们的代码与git commit message。&lt;/p></description></item><item><title>Golang 中的 RESTful API 最佳实践</title><link>https://razeencheng.com/posts/golang-and-restful-api/</link><pubDate>Sun, 15 Mar 2020 01:58:42 +0000</pubDate><guid>https://razeencheng.com/posts/golang-and-restful-api/</guid><description>&lt;p>RESRful API已经流行很多年了，我也一直在使用它。最佳实践也看过不少，但当一个项目完成，再次回顾/梳理项目时，会发现很多API和规范还是多少有些出入。在这篇文章中，我们结合Go Web再次梳理一下RESTful API的相关最佳实践。&lt;/p></description></item><item><title>Go学习笔记(八) | 使用 os/exec 执行命令</title><link>https://razeencheng.com/posts/simple-use-go-exec-command/</link><pubDate>Thu, 30 May 2019 21:06:43 +0000</pubDate><guid>https://razeencheng.com/posts/simple-use-go-exec-command/</guid><description>用Go去调用一些外部的命令其实很愉快的，这遍文章就总结一下我自己日常用的比较多的几种方法。 关于Unix标准输入输出 在具体聊os/exec的使</description></item><item><title>如何用 Go 调用 Windows API</title><link>https://razeencheng.com/posts/breaking-all-the-rules-using-go-to-call-windows-api/</link><pubDate>Wed, 22 May 2019 22:22:35 +0000</pubDate><guid>https://razeencheng.com/posts/breaking-all-the-rules-using-go-to-call-windows-api/</guid><description>&lt;p>有时候为了更好的兼容Windows, 或者我们为了获得更高级别功能的访问权限（如配置或创建JobObjects或安全令牌等），我们需要直接去调用Windows的系统API。 很幸运，我们可以利用&lt;code>syscall&lt;/code>包与系统直接通信，不用用到&lt;code>CGO&lt;/code> 。 然而，也有不方便的地方，如大多数的API，我们需要依赖不安全 &lt;code>(unsafe)&lt;/code>的内存管理。&lt;/p>
&lt;p>这篇文章，主要记录了我在平时开发过程中以及网上收集到的一些关于Windows API调用相关的知识，或者开发模式，方便你遇到类似的情况后，能更快入手。&lt;/p></description></item><item><title>Go学习笔记(七) | 理解OAuth 2.0并实现一个客户端</title><link>https://razeencheng.com/posts/oauth2-protocol-details/</link><pubDate>Thu, 07 Feb 2019 14:41:58 +0000</pubDate><guid>https://razeencheng.com/posts/oauth2-protocol-details/</guid><description>&lt;p>OAuth 2.0是一个关于授权的开放网络标准，主要致力于简化客户端人员开发，同时为Web应用程序、桌面应用程序、移动电话和物联网设备提供特定的授权规范。他的官网在&lt;a href="https://oauth.net/2/">这里&lt;/a>。在&lt;a href="https://tools.ietf.org/html/rfc6749">RFC6749&lt;/a>中有明确协议规范。&lt;/p>
&lt;p>简单来说，我们平时使用的很多第三方登录并获取头像等信息就是用的OAuth 2.0。如我们用QQ登录一些论坛，用google账号登陆facebook，用github账号登陆gitlab等。如下图展示的就是利用QQ登录网易云音乐Web版，其中用到的就是OAuth 2.0。&lt;/p></description></item><item><title>Go学习笔记(六) | 使用swaggo自动生成Restful API文档</title><link>https://razeencheng.com/posts/go-swagger/</link><pubDate>Sun, 13 Jan 2019 00:45:29 +0000</pubDate><guid>https://razeencheng.com/posts/go-swagger/</guid><description>&lt;p>相信很多程序猿和我一样不喜欢写API文档。写代码多舒服，写文档不仅要花费大量的时间，有时候还不能做到面面具全。但API文档是必不可少的，相信其重要性就不用我说了，一份含糊的文档甚至能让前后端人员打起来。 而今天这篇博客介绍的swaggo就是让你只需要专注于代码就可以生成完美API文档的工具。废话说的有点多，我们直接看文章。&lt;/p></description></item><item><title>Go学习笔记(五) | 使用代码片段(snippets)提高编码效率</title><link>https://razeencheng.com/posts/go-snippets/</link><pubDate>Wed, 05 Dec 2018 02:36:29 +0000</pubDate><guid>https://razeencheng.com/posts/go-snippets/</guid><description>&lt;p>在Coding的时候，难免会有一些重复的代码或者形式相似的代码，在写这些代码的时候，你会觉得索然无味，甚至有点讨厌。这时候，你就会想，这段代码是否可以抽象成一个通用的片段，我简单敲几个快捷键就出来了呢。这也就代码片段所解决的问题。&lt;/p></description></item><item><title>gRPC在Go中的使用（三）gRPC实现TLS加密通信与流模式</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-03/</link><pubDate>Mon, 06 Aug 2018 02:05:00 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-03/</guid><description>&lt;p>在前面的两篇博客中，我们已经知道了如何利用gRPC建立简单RPC通信。但这样简单的实现有时候满足不了我们的业务需求。在一些场景中我们需要防止数据被劫持，或是一些场景中我们希望客户端与服务器不是简单的一问一答，而是建立起一个流式的RPC通信，那么该怎么做到呢？&lt;/p></description></item><item><title>gRPC在Go中的使用（二）gRPC实现简单通讯</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-02/</link><pubDate>Thu, 19 Jul 2018 01:51:06 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-02/</guid><description>&lt;p>在上一篇中，我们用protobuf定义了两个消息&lt;code>HelloWorldRequest&lt;/code>与&lt;code>HelloWorldResponse&lt;/code>以及一个&lt;code>HelloWorldService&lt;/code>服务。同时，我们还生成了相应的go代码&lt;code>.pb.go&lt;/code>。&lt;/p>
&lt;p>那么客户端与服务端怎么去通过这些接口去完成通讯呢？下面我们一起实现一个简单的gRPC通讯。&lt;/p></description></item><item><title>gRPC在Go中的使用（一）Protocol Buffers语法与相关使用</title><link>https://razeencheng.com/posts/how-to-use-grpc-in-golang-01/</link><pubDate>Mon, 16 Jul 2018 01:00:41 +0000</pubDate><guid>https://razeencheng.com/posts/how-to-use-grpc-in-golang-01/</guid><description>&lt;p>在gRPC官网用了一句话来介绍:“一个高性能、开源的通用RPC框架”，同时介绍了其四大特点：&lt;/p>
&lt;ul>
&lt;li>定义简单&lt;/li>
&lt;li>支持多种编程语言多种平台&lt;/li>
&lt;li>快速启动和缩放&lt;/li>
&lt;li>双向流媒体和集成身份验证&lt;/li>
&lt;/ul></description></item><item><title>Go学习笔记(二) | 我对 recover 的一点误解</title><link>https://razeencheng.com/posts/daily-go-recover/</link><pubDate>Sun, 21 Jan 2018 22:19:30 +0000</pubDate><guid>https://razeencheng.com/posts/daily-go-recover/</guid><description>&lt;p>在golang的官方介绍中是这么介绍&lt;strong>Recover&lt;/strong>函数的。&lt;/p></description></item><item><title>Go学习笔记(一) | postgres与golang点点滴滴</title><link>https://razeencheng.com/posts/daily-pg-tips/</link><pubDate>Mon, 27 Nov 2017 00:07:00 +0000</pubDate><guid>https://razeencheng.com/posts/daily-pg-tips/</guid><description>&lt;p>在golang中使用数据库主要依赖&lt;code>database/sql&lt;/code>库以及pg的驱动库。而目前我们常用的pg的驱动库是 &lt;code>github.com/lib/pq&lt;/code>。这里我想说的不是如何去使用它们，毕竟人家文档已经很详细了，这里主要总结了一下自己日常使用中学到的一些技巧。&lt;/p></description></item><item><title>Golang CGO Mac 交叉编译 Windows</title><link>https://razeencheng.com/posts/golang-cgo-mac-win-cross-compilation/</link><pubDate>Sat, 12 Aug 2017 22:48:22 +0000</pubDate><guid>https://razeencheng.com/posts/golang-cgo-mac-win-cross-compilation/</guid><description>&lt;p>有个小项目，使用sqlite3数据库，需要跨平台编译。我在Mac上开发的，现在编译一份windows平台的。&lt;/p></description></item><item><title>Gin文件上传与下载</title><link>https://razeencheng.com/posts/gin-file-down-upload/</link><pubDate>Sun, 12 Mar 2017 13:06:52 +0000</pubDate><guid>https://razeencheng.com/posts/gin-file-down-upload/</guid><description>&lt;p>Gin是用Go编写的web框架。性能还不错，而且使用比较简单，还支持RESTful API。&lt;/p>
&lt;p>日常的使用中我们可能要处理一些文件的上传与下载，我这里简单总结一下。&lt;/p></description></item></channel></rss>